#dnyScriptParser demo script file

const C_CONSTANT_STRING string <= "Constant string";

declare boolvar bool;
declare intvar int;
declare floatvar float;
declare stringvar string;
declare stringvar2 string;
declare customvar MyDataType;

set boolvar <= true;
set intvar <= 100;
set floatvar <= 0.5;
set stringvar <= "Hi there";
set stringvar2 <= "%stringvar";
set customvar <= "** Custom Value**";

print "%stringvar %stringvar2"; #Comments can be put alone in a single line or at the end of the line

print "%customvar";

if(%stringvar, -eq, "Hi there2")
{
	print "They are equal! %stringvar";
}
elseif(%stringvar, -nt, "Hi there2")
{
	print "Elseif...";
};

function somefunc int(arg1 string, arg2 string)
{
	print "[somefunc] %arg1 %arg2";
	result 0;
};

print "%C_CONSTANT_STRING";
set C_CONSTANT_STRING <= "Overwriting does not work";
print "%C_CONSTANT_STRING";
#undeclare C_CONSTANT_STRING; #Undeclaring a const does also not work 
print "%C_CONSTANT_STRING";

function callme int(arg1 int)
{
	print "You have called me! %arg1";
	local temp int;
	set temp <= %arg1;
	*= temp 1000;
	result %temp;
};
call callme(1) => intvar;
print "1.: %intvar";

call somefunc("test1", "test2") => intvar;

print "2.: %intvar";

mycommand "This is a text";
mycommand2 5 floatvar;

print "3. %floatvar";

for(i, 10, 0, -dec)
{
	if(%i, -lse, 4)
	{
		print "Iteration num: %i";
		
		for(j, 0, 100, 50){print "Another for-loop! %j";};
	}
	elseif(%i, -eq, 5)
	{
		print "It's 5!";
	}
	else
	{
		print "Else";
	};
};

class CTestClass {
	member m_myVar int;
	
	method construct void()
	{
		print "Constructor called";
	};
	
	method destruct void()
	{
		print "Destructor called";
	};
	
	method TestFunc void(testvar int)
	{
		set %this.m_myVar <= %testvar;
	};
};

declare whilevar int;
set whilevar <= 0;
while(%whilevar, -ls, 20)
{
	print "While-var: %whilevar";
	+= whilevar 2;
};

undeclare whilevar;

print "%whilevar";

undeclare customvar;

declare classInstance class;
set classInstance <= CTestClass;
call classInstance.TestFunc(1234) => void;
print "Class member value: %classInstance.m_myVar";
undeclare classInstance;

exit;

print "This one is never executed!";